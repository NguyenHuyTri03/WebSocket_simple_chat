{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/chat.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction ChatPageComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 7)(1, \"input\", 8);\n    i0.ɵɵlistener(\"ngModelChange\", function ChatPageComponent_div_1_Template_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.sender = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"input\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function ChatPageComponent_div_1_Template_input_ngModelChange_2_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.roomId = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 6);\n    i0.ɵɵlistener(\"click\", function ChatPageComponent_div_1_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.joinRoom(ctx_r5.roomId));\n    });\n    i0.ɵɵtext(4, \"Join\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.sender);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.roomId);\n  }\n}\nfunction ChatPageComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"p\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const msg_r6 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"From: \", msg_r6.sender, \"\");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"Msg: \", msg_r6.senderMsg, \"\");\n  }\n}\nexport class ChatPageComponent {\n  constructor(chatService) {\n    this.chatService = chatService;\n    this.messages = [];\n    this.roomId = '';\n    this.newMsg = '';\n    this.sender = '';\n    this.isLoggedIn = false;\n  }\n  getTime() {\n    const time = new Date();\n    let currTime = time.toLocaleString();\n    console.log(currTime);\n    return currTime;\n  }\n  joinRoom(roomId) {\n    if (roomId || this.sender) {\n      this.isLoggedIn = true;\n      this.chat$ = this.chatService.getMsgByRoomId(roomId);\n      this.chat$.subscribe(msg => {\n        this.messages.push(msg);\n      });\n    } else {\n      window.alert(\"Enter the missing field\");\n    }\n  }\n  sendMessage(message) {\n    let data = {\n      roomId: this.roomId,\n      sender: this.sender,\n      senderMsg: this.newMsg,\n      time: this.getTime().toString()\n    };\n    this.chatService.sendMessageByRoom(data);\n  }\n}\nChatPageComponent.ɵfac = function ChatPageComponent_Factory(t) {\n  return new (t || ChatPageComponent)(i0.ɵɵdirectiveInject(i1.ChatService));\n};\nChatPageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ChatPageComponent,\n  selectors: [[\"app-chat-page\"]],\n  decls: 8,\n  vars: 3,\n  consts: [[1, \"mainDiv\"], [\"class\", \"usrInfoDiv\", 4, \"ngIf\"], [1, \"chatDiv\"], [4, \"ngFor\", \"ngForOf\"], [1, \"msgSendDiv\"], [\"type\", \"text\", \"placeholder\", \"message\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [1, \"usrInfoDiv\"], [\"type\", \"text\", \"placeholder\", \"User name\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"placeholder\", \"room id\", 3, \"ngModel\", \"ngModelChange\"]],\n  template: function ChatPageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, ChatPageComponent_div_1_Template, 5, 2, \"div\", 1);\n      i0.ɵɵelementStart(2, \"div\", 2);\n      i0.ɵɵtemplate(3, ChatPageComponent_div_3_Template, 5, 2, \"div\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 4)(5, \"input\", 5);\n      i0.ɵɵlistener(\"ngModelChange\", function ChatPageComponent_Template_input_ngModelChange_5_listener($event) {\n        return ctx.newMsg = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function ChatPageComponent_Template_button_click_6_listener() {\n        return ctx.sendMessage(ctx.newMsg);\n      });\n      i0.ɵɵtext(7, \"Send\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.isLoggedIn);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngModel\", ctx.newMsg);\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgModel],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;IACIA,8BAA4C;IACrBA;MAAAA;MAAA;MAAA;IAAA,EAAoB;IAAvCA,iBAAkE;IAClEA,gCAAgE;IAA7CA;MAAAA;MAAA;MAAA;IAAA,EAAoB;IAAvCA,iBAAgE;IAChEA,iCAAmC;IAA3BA;MAAAA;MAAA;MAAA,OAASA,6CAAgB;IAAA,EAAC;IAACA,oBAAI;IAAAA,iBAAS;;;;IAF7BA,eAAoB;IAApBA,uCAAoB;IACpBA,eAAoB;IAApBA,uCAAoB;;;;;IAIvCA,2BAAkC;IAC3BA,YAAoB;IAAAA,iBAAI;IAC3BA,yBAAG;IAAAA,YAAsB;IAAAA,iBAAI;;;;IAD1BA,eAAoB;IAApBA,kDAAoB;IACpBA,eAAsB;IAAtBA,oDAAsB;;;ACErC,OAAM,MAAOC,iBAAiB;EAE5BC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAG/B,aAAQ,GAAQ,EAAE;IAClB,WAAM,GAAW,EAAE;IACnB,WAAM,GAAW,EAAE;IACnB,WAAM,GAAW,EAAE;IACnB,eAAU,GAAY,KAAK;EAPmB;EAS9CC,OAAO;IACL,MAAMC,IAAI,GAAG,IAAIC,IAAI,EAAE;IACvB,IAAIC,QAAQ,GAAWF,IAAI,CAACG,cAAc,EAAE;IAC5CC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;IACrB,OAAOA,QAAQ;EACjB;EAEAI,QAAQ,CAACC,MAAc;IACrB,IAAGA,MAAM,IAAI,IAAI,CAACC,MAAM,EAAC;MACvB,IAAI,CAACC,UAAU,GAAG,IAAI;MACtB,IAAI,CAACC,KAAK,GAAG,IAAI,CAACZ,WAAW,CAACa,cAAc,CAACJ,MAAM,CAAC;MACpD,IAAI,CAACG,KAAK,CAACE,SAAS,CAAGC,GAAQ,IAAI;QACjC,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACF,GAAG,CAAC;MACzB,CAAC,CAAC;KACH,MAAI;MACHG,MAAM,CAACC,KAAK,CAAC,yBAAyB,CAAC;;EAE3C;EAEAC,WAAW,CAACC,OAAe;IACzB,IAAIC,IAAI,GAAc;MACpBb,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBa,SAAS,EAAE,IAAI,CAACC,MAAM;MACtBtB,IAAI,EAAE,IAAI,CAACD,OAAO,EAAE,CAACwB,QAAQ;KAC9B;IACD,IAAI,CAACzB,WAAW,CAAC0B,iBAAiB,CAACJ,IAAI,CAAC;EAC1C;;AAtCWxB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAA6B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDX9BlC,8BAAqB;MACjBA,kEAIM;MACNA,8BAAqB;MACjBA,kEAGM;MACVA,iBAAM;MACNA,8BAAwB;MACDA;QAAA;MAAA,EAAoB;MAAvCA,iBAAgE;MAChEA,iCAAsC;MAA9BA;QAAA,OAASmC,2BAAmB;MAAA,EAAC;MAACnC,oBAAI;MAAAA,iBAAS;;;MAb9BA,eAAiB;MAAjBA,sCAAiB;MAMjBA,eAAW;MAAXA,sCAAW;MAMbA,eAAoB;MAApBA,oCAAoB","names":["i0","ChatPageComponent","constructor","chatService","getTime","time","Date","currTime","toLocaleString","console","log","joinRoom","roomId","sender","isLoggedIn","chat$","getMsgByRoomId","subscribe","msg","messages","push","window","alert","sendMessage","message","data","senderMsg","newMsg","toString","sendMessageByRoom","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\ITSS\\class projects\\nestjs\\Chat\\chat_client\\src\\app\\pages\\chat-page\\chat-page.component.html","C:\\ITSS\\class projects\\nestjs\\Chat\\chat_client\\src\\app\\pages\\chat-page\\chat-page.component.ts"],"sourcesContent":["<div class=\"mainDiv\">\n    <div class=\"usrInfoDiv\" *ngIf=\"!isLoggedIn\">\n        <input type=\"text\" [(ngModel)]=\"sender\" placeholder=\"User name\" />\n        <input type=\"text\" [(ngModel)]=\"roomId\" placeholder=\"room id\" />\n        <button (click)=\"joinRoom(roomId)\">Join</button>\n    </div>\n    <div class=\"chatDiv\">\n        <div *ngFor=\"let msg of messages\">\n            <p>From: {{msg.sender}}</p>\n            <p>Msg: {{msg.senderMsg}}</p>\n        </div>\n    </div>\n    <div class=\"msgSendDiv\">\n        <input type=\"text\" [(ngModel)]=\"newMsg\" placeholder=\"message\" />\n        <button (click)=\"sendMessage(newMsg)\">Send</button>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { async, Observable, of } from 'rxjs';\nimport { ChatService } from 'src/app/services/chat.service';\nimport { ChatModel } from 'src/models/chat.model';\n\n@Component({\n  selector: 'app-chat-page',\n  templateUrl: './chat-page.component.html',\n  styleUrls: ['./chat-page.component.scss']\n})\nexport class ChatPageComponent{\n\n  constructor(private chatService: ChatService){}\n\n  chat$ !: Observable<any>;\n  messages: any = [];\n  roomId: string = '';\n  newMsg: string = '';\n  sender: string = '';\n  isLoggedIn: boolean = false;\n\n  getTime(){\n    const time = new Date();\n    let currTime: string = time.toLocaleString();\n    console.log(currTime);\n    return currTime;\n  }\n\n  joinRoom(roomId: string){\n    if(roomId || this.sender){\n      this.isLoggedIn = true;\n      this.chat$ = this.chatService.getMsgByRoomId(roomId);\n      this.chat$.subscribe( (msg: any) => {\n        this.messages.push(msg);\n      });\n    }else{\n      window.alert(\"Enter the missing field\");\n    }\n  }\n\n  sendMessage(message: string){\n    let data: ChatModel = {\n      roomId: this.roomId,\n      sender: this.sender,\n      senderMsg: this.newMsg,\n      time: this.getTime().toString(),\n    }\n    this.chatService.sendMessageByRoom(data);\n  }\n\n  // chat$: Observable<ChatState>;\n  // room$: Observable<ChatState>;\n\n  // constructor(private store: Store<{chat: ChatState}>, private chatService: ChatService){\n  //   this.chat$ = this.store.select('chat');\n  //   this.room$ = this.store.select('chat');\n  // }\n\n  // ngOnInit(){\n  //   this.store.dispatch(ChatActions.getAllChat());\n  //   this.chat$.subscribe( (data) => {\n  //     // console.log(data);\n  //   });\n  // }\n\n  // getChatById(roomId: string){\n  //   // this.store.dispatch(ChatActions.getById());\n  //   // this.chat$.subscribe( (data) => {\n  //   //   // console.log(data);\n  //   // })\n  //   this.chatService.getById(roomId).subscribe((data) =>{\n  //     console.log(data)\n  //   })\n  // }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}