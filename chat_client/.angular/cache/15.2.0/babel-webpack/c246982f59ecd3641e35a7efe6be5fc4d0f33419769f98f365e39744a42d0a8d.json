{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { catchError, map, mergeMap, of, switchMap } from \"rxjs\";\nimport * as ChatActions from '../actions/chat.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\nimport * as i2 from \"src/app/services/chat.service\";\nexport class ChatEffect {\n  constructor(action$, chatService) {\n    this.action$ = action$;\n    this.chatService = chatService;\n    this.getAllChat$ = createEffect(() => this.action$.pipe(ofType(ChatActions.getAllChat), switchMap(action => {\n      return this.chatService.getAllChats();\n    }), map(data => {\n      return ChatActions.getAllChatSuccess({\n        chatData: data\n      });\n    }), catchError(error => {\n      return of(ChatActions.getAllChatFailure({\n        error: error.message\n      }));\n    })));\n    this.getById$ = createEffect(() => this.action$.pipe(ofType(ChatActions.getById), mergeMap(action => {\n      return this.chatService.getById(action);\n    }), map(data => {\n      return ChatActions.getByIdSuccess({\n        chatData: data\n      });\n    }), catchError(error => {\n      return of(ChatActions.getByIdFailure({\n        error: error.message\n      }));\n    })));\n  }\n}\nChatEffect.ɵfac = function ChatEffect_Factory(t) {\n  return new (t || ChatEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(i2.ChatService));\n};\nChatEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatEffect,\n  factory: ChatEffect.ɵfac\n});","map":{"version":3,"mappings":"AACA,SAAkBA,YAAY,EAAEC,MAAM,QAAQ,eAAe;AAC7D,SAASC,UAAU,EAAEC,GAAG,EAAEC,QAAQ,EAAEC,EAAE,EAAEC,SAAS,QAAQ,MAAM;AAG/D,OAAO,KAAKC,WAAW,MAAM,wBAAwB;;;;AAIrD,OAAM,MAAOC,UAAU;EACnBC,YAAqBC,OAAgB,EAAUC,WAAwB;IAAlD,YAAO,GAAPD,OAAO;IAAmB,gBAAW,GAAXC,WAAW;IAE1D,gBAAW,GAAGX,YAAY,CACtB,MAAM,IAAI,CAACU,OAAO,CAACE,IAAI,CACnBX,MAAM,CAACM,WAAW,CAACM,UAAU,CAAC,EAC9BP,SAAS,CAAGQ,MAAM,IAAI;MAClB,OAAO,IAAI,CAACH,WAAW,CAACI,WAAW,EAAE;IACzC,CAAC,CAAC,EACFZ,GAAG,CAAGa,IAAI,IAAI;MACV,OAAOT,WAAW,CAACU,iBAAiB,CAAC;QAAEC,QAAQ,EAAoBF;MAAI,CAAE,CAAC;IAC9E,CAAC,CAAC,EACFd,UAAU,CAAGiB,KAAK,IAAI;MAClB,OAAOd,EAAE,CAACE,WAAW,CAACa,iBAAiB,CAAE;QAAED,KAAK,EAAEA,KAAK,CAACE;MAAO,CAAC,CAAC,CAAC;IACtE,CAAC,CAAC,CACL,CACJ;IAED,aAAQ,GAAGrB,YAAY,CACnB,MAAM,IAAI,CAACU,OAAO,CAACE,IAAI,CACnBX,MAAM,CAACM,WAAW,CAACe,OAAO,CAAC,EAC3BlB,QAAQ,CAAGU,MAAM,IAAI;MACjB,OAAO,IAAI,CAACH,WAAW,CAACW,OAAO,CAACR,MAAM,CAAC;IAC1C,CAAC,CAAC,EACHX,GAAG,CAAGa,IAAI,IAAI;MACV,OAAOT,WAAW,CAACgB,cAAc,CAAE;QAAEL,QAAQ,EAAoBF;MAAI,CAAC,CAAC;IAC3E,CAAC,CAAC,EACFd,UAAU,CAAGiB,KAAK,IAAI;MAClB,OAAOd,EAAE,CAACE,WAAW,CAACiB,cAAc,CAAE;QAAEL,KAAK,EAAEA,KAAK,CAACE;MAAO,CAAC,CAAC,CAAC;IACnE,CAAC,CAAC,CACL,CACJ;EA9BwE;;AADhEb,UAAU;mBAAVA,UAAU;AAAA;AAAVA,UAAU;SAAVA,UAAU;EAAAiB,SAAVjB,UAAU;AAAA","names":["createEffect","ofType","catchError","map","mergeMap","of","switchMap","ChatActions","ChatEffect","constructor","action$","chatService","pipe","getAllChat","action","getAllChats","data","getAllChatSuccess","chatData","error","getAllChatFailure","message","getById","getByIdSuccess","getByIdFailure","factory"],"sourceRoot":"","sources":["C:\\ITSS\\class projects\\nestjs\\Chat\\chat_client\\src\\NgRx\\effects\\chat.effect.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Actions, createEffect, ofType } from \"@ngrx/effects\";\r\nimport { catchError, map, mergeMap, of, switchMap } from \"rxjs\";\r\nimport { ChatService } from \"src/app/services/chat.service\";\r\nimport { ChatModel } from \"src/models/chat.model\";\r\nimport * as ChatActions from '../actions/chat.action'\r\n\r\n\r\n@Injectable()\r\nexport class ChatEffect{\r\n    constructor( private action$: Actions, private chatService: ChatService){}\r\n\r\n    getAllChat$ = createEffect(\r\n        () => this.action$.pipe(\r\n            ofType(ChatActions.getAllChat),\r\n            switchMap( (action) => {\r\n                return this.chatService.getAllChats();\r\n            }),\r\n            map( (data) => {\r\n                return ChatActions.getAllChatSuccess({ chatData: <Array<ChatModel>>data })\r\n            }),\r\n            catchError( (error) => {\r\n                return of(ChatActions.getAllChatFailure( { error: error.message}));\r\n            })\r\n        )\r\n    )\r\n\r\n    getById$ = createEffect(\r\n        () => this.action$.pipe(\r\n            ofType(ChatActions.getById),\r\n            mergeMap( (action) => {\r\n                return this.chatService.getById(action);\r\n             }),\r\n            map( (data) => {\r\n                return ChatActions.getByIdSuccess( { chatData: <Array<ChatModel>>data});\r\n            }),\r\n            catchError( (error) =>{\r\n                return of(ChatActions.getByIdFailure( { error: error.message}))\r\n            })\r\n        )\r\n    )\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}