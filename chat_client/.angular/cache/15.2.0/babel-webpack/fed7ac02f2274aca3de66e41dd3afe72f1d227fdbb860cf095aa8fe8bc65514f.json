{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/chat.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/forms\";\nfunction AppComponent_p_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const msg_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(msg_r1);\n  }\n}\nexport class AppComponent {\n  constructor(chatService) {\n    this.chatService = chatService;\n    this.title = 'chat_client';\n    this.messages = [];\n    this.roomId = '';\n    this.newMsg = '';\n    this.sender = '';\n  }\n  ngOnInit() {\n    // this.chatService.getAllChats().subscribe((data) =>{\n    //   console.log(data)\n    // })\n    // this.chatService.getById(\"room1\").subscribe((data) =>{\n    //   console.log(data)\n    // })\n  }\n  joinRoom(roomId) {\n    if (roomId || this.sender) {\n      console.log(\"Joined in room: \", roomId);\n      this.chat$ = this.chatService.getMsgByRoomId(roomId);\n      this.chat$.subscribe(msg => {\n        this.messages.push(msg);\n      });\n    } else {\n      window.alert(\"Enter the missing field\");\n    }\n  }\n  sendMessage(message) {\n    let data = {\n      roomId: this.roomId,\n      sender: this.sender,\n      senderMsg: message,\n      time: Date.now().toLocaleString()\n    };\n    this.chatService.sendMessageByRoom(data);\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.ChatService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 10,\n  vars: 4,\n  consts: [[\"type\", \"text\", \"placeholder\", \"user\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"placeholder\", \"room id\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [\"type\", \"text\", \"placeholder\", \"message\", 3, \"ngModel\", \"ngModelChange\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"input\", 0);\n      i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_0_listener($event) {\n        return ctx.sender = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(1, \"button\");\n      i0.ɵɵelementStart(2, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_2_listener($event) {\n        return ctx.roomId = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_3_listener() {\n        return ctx.joinRoom(ctx.roomId);\n      });\n      i0.ɵɵtext(4, \"Join\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"input\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function AppComponent_Template_input_ngModelChange_5_listener($event) {\n        return ctx.newMsg = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_6_listener() {\n        return ctx.sendMessage(ctx.newMsg);\n      });\n      i0.ɵɵtext(7, \"Send\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(8, AppComponent_p_8_Template, 2, 1, \"p\", 4);\n      i0.ɵɵelement(9, \"router-outlet\");\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngModel\", ctx.sender);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngModel\", ctx.roomId);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngModel\", ctx.newMsg);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngForOf\", ctx.messages);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.RouterOutlet, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgModel],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;;IAQAA,yBAAgC;IAAAA,YAAO;IAAAA,iBAAI;;;;IAAXA,eAAO;IAAPA,4BAAO;;;ACEvC,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;IAF/B,UAAK,GAAG,aAAa;IAcrB,aAAQ,GAAO,EAAE;IACjB,WAAM,GAAW,EAAE;IACnB,WAAM,GAAW,EAAE;IACnB,WAAM,GAAW,EAAE;EAf2B;EAE9CC,QAAQ;IACN;IACA;IACA;IACA;IACA;IACA;EAAA;EASFC,QAAQ,CAACC,MAAc;IACrB,IAAGA,MAAM,IAAI,IAAI,CAACC,MAAM,EAAC;MACvBC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEH,MAAM,CAAC;MACvC,IAAI,CAACI,KAAK,GAAG,IAAI,CAACP,WAAW,CAACQ,cAAc,CAACL,MAAM,CAAC;MACpD,IAAI,CAACI,KAAK,CAACE,SAAS,CAAGC,GAAQ,IAAI;QACjC,IAAI,CAACC,QAAQ,CAACC,IAAI,CAACF,GAAG,CAAC;MACzB,CAAC,CAAC;KACH,MAAI;MACHG,MAAM,CAACC,KAAK,CAAC,yBAAyB,CAAC;;EAE3C;EAEAC,WAAW,CAACC,OAAe;IACzB,IAAIC,IAAI,GAAc;MACpBd,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBC,MAAM,EAAE,IAAI,CAACA,MAAM;MACnBc,SAAS,EAAEF,OAAO;MAClBG,IAAI,EAAEC,IAAI,CAACC,GAAG,EAAE,CAACC,cAAc;KAChC;IACD,IAAI,CAACtB,WAAW,CAACuB,iBAAiB,CAACN,IAAI,CAAC;EAC1C;;AAxCWnB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAA0B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDVzB/B,gCAA6D;MAA1CA;QAAA;MAAA,EAAoB;MAAvCA,iBAA6D;MAC7DA,yBAAiB;MACjBA,gCAA+D;MAA5CA;QAAA;MAAA,EAAoB;MAAvCA,iBAA+D;MAC/DA,iCAAmC;MAA3BA;QAAA,OAASgC,wBAAgB;MAAA,EAAC;MAAChC,oBAAI;MAAAA,iBAAS;MAEhDA,gCAA+D;MAA5CA;QAAA;MAAA,EAAoB;MAAvCA,iBAA+D;MAC/DA,iCAAsC;MAA9BA;QAAA,OAASgC,2BAAmB;MAAA,EAAC;MAAChC,oBAAI;MAAAA,iBAAS;MAEnDA,yDAA2C;MAE3CA,gCAA+B;;;MAVZA,oCAAoB;MAEpBA,eAAoB;MAApBA,oCAAoB;MAGpBA,eAAoB;MAApBA,oCAAoB;MAGpBA,eAAW;MAAXA,sCAAW","names":["i0","AppComponent","constructor","chatService","ngOnInit","joinRoom","roomId","sender","console","log","chat$","getMsgByRoomId","subscribe","msg","messages","push","window","alert","sendMessage","message","data","senderMsg","time","Date","now","toLocaleString","sendMessageByRoom","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\ITSS\\class projects\\nestjs\\Chat\\chat_client\\src\\app\\app.component.html","C:\\ITSS\\class projects\\nestjs\\Chat\\chat_client\\src\\app\\app.component.ts"],"sourcesContent":["<input type=\"text\" [(ngModel)]=\"sender\" placeholder=\"user\" />\r\n<button></button>\r\n<input type=\"text\" [(ngModel)]=\"roomId\" placeholder=\"room id\"/>\r\n<button (click)=\"joinRoom(roomId)\">Join</button>\r\n\r\n<input type=\"text\" [(ngModel)]=\"newMsg\" placeholder=\"message\"/>\r\n<button (click)=\"sendMessage(newMsg)\">Send</button>\r\n\r\n<p *ngFor=\"let msg of messages\">{{msg}}</p>\r\n\r\n<router-outlet></router-outlet>","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { ChatModel } from 'src/models/chat.model';\nimport { ChatService } from './services/chat.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit{\n  title = 'chat_client';\n\n  constructor(private chatService: ChatService){}\n\n  ngOnInit(){\n    // this.chatService.getAllChats().subscribe((data) =>{\n    //   console.log(data)\n    // })\n    // this.chatService.getById(\"room1\").subscribe((data) =>{\n    //   console.log(data)\n    // })\n  }\n\n  chat$!: Observable<any>;\n  messages :any= [];\n  roomId: string = '';\n  newMsg: string = '';\n  sender: string = '';\n\n  joinRoom(roomId: string){\n    if(roomId || this.sender){\n      console.log(\"Joined in room: \", roomId);\n      this.chat$ = this.chatService.getMsgByRoomId(roomId);\n      this.chat$.subscribe( (msg: any) => {\n        this.messages.push(msg);\n      });\n    }else{\n      window.alert(\"Enter the missing field\");\n    }\n  }\n\n  sendMessage(message: string){\n    let data: ChatModel = {\n      roomId: this.roomId,\n      sender: this.sender,\n      senderMsg: message,\n      time: Date.now().toLocaleString(),\n    }\n    this.chatService.sendMessageByRoom(data);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}